MovieRatingMatrix_Train <- MovieRatingMatrix[which_train]
MovieRatingMatrix_Test <- MovieRatingMatrix[!which_train]
n_recommended <- 4 # generate 4 recommendation per user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix, n = n_recommended)  # Prediction for test data
MovieRating_Recommender_Model <- Recommender(data=MovieRatingMatrix_Train,method="UBCF")
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix, n = n_recommended)  # Prediction for test data
which_train <- sample(x = c(TRUE, FALSE), size =
nrow(MovieRatingMatrix),replace = TRUE, prob = c(0.3,0.7))
MovieRatingMatrix_Train <- MovieRatingMatrix[which_train]
MovieRatingMatrix_Test <- MovieRatingMatrix[!which_train]
#To see the content of realRatingMatrix[1:10] in matrix and in dataframe
as(MovieRatingMatrix[1:10], "matrix")
as(MovieRatingMatrix, "data.frame")
#To see the content of realRatingMatrix[1:10] in matrix and in dataframe
as(MovieRatingMatrix[1:10], "matrix")
View(MovieRating_Triplets)
userIDList
#Reading csv files
Ratings <- read.csv("../../Data/ratings_group3.csv")
Movies <- read.csv("../../Data/Movies_NEW.csv")
### Actual Data ##
MovieRating_Full <- setDT(read.csv("../Data/MoviesRatings_New.csv"))
library(data.table)
### Actual Data ##
MovieRating_Full <- setDT(read.csv("../Data/MoviesRatings_New.csv"))
#Reading csv files
Ratings <- read.csv("../Data/ratings_group3.csv")
Movies <- read.csv("../Data/Movies_NEW.csv")
Movies$RecommendedMovies <- Movies$title_new # Column with common name to Merge
View(Movies)
#loading already created model and rating matrix
load("../../Data/Movie_Recommender_Model.data")
#loading already created model and rating matrix
load("../Data/Movie_Recommender_Model.data")
load("../Data/MovieRatingMatrix.data")
#storing only unique userid's
userIDList <- unique(Ratings$userId)
outputStr <- "Enter user and click Recommend button to see the Recommended movies for the User"
MovieRating_Merged <-  setDT(read.csv("../Data/MoviesRatings_NEW.csv"))
findUserSummary <- function(id) {
items <- c("Number of Movies Rated","Average Rating","Maximum rating", "Last Rating Date")
values <- c(nrow(MovieRating_Merged[userId==id]),
mean(MovieRating_Merged[userId==id]$rating),
max(MovieRating_Merged[userId==id]$rating),
as.POSIXct(max(MovieRating_Merged[userId==id]$timestamp), origin = "1970-01-01"))
data.table(items,values)
}
as.POSIXct(max(MovieRating_Merged[userId==id]$timestamp), origin = "1970-01-01")
eval_sets
eval_sets <- evaluationScheme(data=MovieRatingMatrix,
method = "cross-validation",
train=0.8,
given=items_to_keep,
goodRating=rating_threshold,
k=n_fold)
### Recommendation Engine ##
library(recommenderlab)
eval_sets <- evaluationScheme(data=MovieRatingMatrix,
method = "cross-validation",
train=0.8,
given=items_to_keep,
goodRating=rating_threshold,
k=n_fold)
items_to_keep <- 1 # there are users who gave rating for only one movie
rating_threshold <- 3
n_fold <- 5  # 5-fold
eval_sets <- evaluationScheme(data=MovieRatingMatrix,
method = "cross-validation",
train=0.8,
given=items_to_keep,
goodRating=rating_threshold,
k=n_fold)
shiny::runApp('MovieRecommendationApp')
recom_list <- as(MovieRecommendation_Predicted,
"list")
### Recommendation Engine ##
library(recommenderlab)
library(data.table)
### Actual Data ##
MovieRating_Full <- setDT(read.csv("../Data/MoviesRatings_New.csv"))
MovieRating_Triplets <- MovieRating_Full[,.(userId,title_new,rating)][!is.na(userId)]
#MovieRating_Triplets_1 <- MovieRating_Triplets[userId == "1"]
##MovieRating_Triplets
MovieRatingMatrix <- as(MovieRating_Triplets, "realRatingMatrix")
#To see the content of realRatingMatrix[1:10] in matrix and in dataframe
as(MovieRatingMatrix[1:10], "matrix")
as(MovieRatingMatrix, "data.frame")
## Preparing train and test data
set.seed(1)  # to have same results for random generation
#realRatingMatrix normalized data,not normalizing the data using below code
# normalize_MovieRatingMatrix <- normalize(MovieRatingMatrix)
#
# normalize_MovieRatingMatrix
#
# getRatingMatrix(normalize_MovieRatingMatrix)
#
# image(MovieRatingMatrix, main = "Raw Ratings")
#spliting ratingmatrix into two with the proportion of 30% and 70%
which_train <- sample(x = c(TRUE, FALSE), size =
nrow(MovieRatingMatrix),replace = TRUE, prob = c(0.3,0.7))
which_train
MovieRatingMatrix_Train <- MovieRatingMatrix[which_train]
MovieRatingMatrix_Test <- MovieRatingMatrix[!which_train]
#To know how many models are there in Recommenderlab
recommender_models <- recommenderRegistry$get_entries(dataType =
"realRatingMatrix")
recommender_models
#Building a model
MovieRating_Recommender_Model <- Recommender(data=MovieRatingMatrix_Train,method="UBCF")
n_recommended <- 5 # generate 5 recommendation per user
#get accurate result if the below code is used for prediction,need huge memory
#MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
#                                           MovieRatingMatrix, n = n_recommended)  # Prediction for test data
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[1], n = n_recommended)  # Prediction for first user test data
save(MovieRating_Recommender_Model,file="../Data/Movie_Recommender_Model.data")
save(MovieRatingMatrix,file="../Data/MovieRatingMatrix.data")
#to see the list of movies recommended for the first user
recom_list <- as(MovieRecommendation_Predicted,
"list")
recom_list
#Example to find prediction based on UserId
SortedUserList <- unique(sort(MovieRating_Triplets$userId))
which(SortedUserList == 1116)
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[which(SortedUserList == 4405)], n = n_recommended)  # Prediction for test data
recom_list <- as(MovieRecommendation_Predicted,
"list")
recom_list
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
View(MovieRecommendation_Predicted)
View(MovieRecommendation_Predicted)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
Recommendation
runApp('MovieRecommendationApp')
runApp('example')
runApp('~/testdir/testdir2/exer')
runApp('MovieRecommendationApp')
?autocomplete_input
runApp('MovieRecommendationApp')
install.packages("shinythemes")
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
install.packages("shinydashboard")
library(shinydashboard)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
#DescriptiveStatistics
summary(MovieRating_Full)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
View(MovieRating_Merged)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
MovieRating_Merged$movieId
unique(MovieRating_Merged$movieId)
length(unique(MovieRating_Merged$movieId))
length(unique(MovieRating_Merged$rating[!is.na]))
MovieRating_Merged$rating[!is.na]
MovieRating_Merged$rating
is.na(MovieRating_Merged$rating)
!is.na(MovieRating_Merged$rating)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
#Building a model
MovieRating_Recommender_Model <- Recommender(data=MovieRatingMatrix_Train,method="UBCF")
affinity.data
eval_sets
size_sets <- sapply(eval_sets@runsTrain, length)
size_sets
model_to_evaluate <- "UBCF"
model_parameters <- NULL
eval_recommender <- Recommender(data = getData(eval_sets,
"train"),method = model_to_evaluate, parameter = model_parameters)
eval_recommender
eval_prediction <- predict(object = eval_recommender, newdata
=getData(eval_sets, "known"), n = items_to_recommend, type =
"ratings")
memory.limit()
memory.size()
install.packages("ff")
library(ff)
eval_prediction <- ff(predict(object = eval_recommender, newdata
=getData(eval_sets, "known"), n = items_to_recommend, type =
"ratings"))
vmode(eval_recommender)
eval_prediction <- ffapply(predict(object = eval_recommender, newdata
=getData(eval_sets, "known"), n = items_to_recommend, type =
"ratings"))
fftempdir
fftempfile
getoption("fftempdir")
getOption("fftempdir")
?predict
?predict
MovieRating_Recommender_Model$predict
MovieRating_Recommender_Model
MovieRatingMatrix
#spliting ratingmatrix into two with the proportion of 30% and 70%
which_train <- sample(x = c(TRUE, FALSE), size =
nrow(MovieRatingMatrix),replace = TRUE, prob = c(0.8,0.2))
MovieRatingMatrix_Train <- MovieRatingMatrix[which_train]
MovieRatingMatrix_Test <- MovieRatingMatrix[!which_train]
#Building a model
MovieRating_Recommender_Model <- Recommender(data=MovieRatingMatrix_Train,method="UBCF", param=list(normalize = "center"))
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[1], n = n_recommended)  # Prediction for first user test data
memory.limit(100000)
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[1], n = n_recommended)  # Prediction for first user test data
#to see the list of movies recommended for the first user
recom_list <- as(MovieRecommendation_Predicted,
"list")
recom_list
eval_prediction <- predict(object = eval_recommender, newdata
=getData(eval_sets, "known"), n = items_to_recommend, type =
"ratings")
save("../../Data/Movie_Recommender_Model.data")
save("../Data/Movie_Recommender_Model.data")
save(MovieRating_Recommender_Model,"../Data/Movie_Recommender_Model.data")
n_recommended <- 5 # generate 5 recommendation per user
save(MovieRating_Recommender_Model,"../Data/Movie_Recommender_Model.data")
?save
save(MovieRating_Recommender_Model,file="../Data/Movie_Recommender_Model.data")
n_recommended <- 5 # generate 5 recommendation per user
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[1:2], n = n_recommended)  # Prediction for first user test data
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[1:2], n = n_recommended)  # Prediction for first user test data
### Recommendation Engine ##
library(recommenderlab)
library(data.table)
### Actual Data ##
MovieRating_Full <- setDT(read.csv("../Data/MoviesRatings_New.csv"))
MovieRating_Triplets <- MovieRating_Full[,.(userId,title_new,rating)][!is.na(userId)]
##MovieRating_Triplets
MovieRatingMatrix <- as(MovieRating_Triplets, "realRatingMatrix")
## Preparing train and test data
set.seed(1)  # to have same results for random generation
## Preparing train and test data
set.seed(1)  # to have same results for random generation
#spliting ratingmatrix into two with the proportion of 30% and 70%
which_train <- sample(x = c(TRUE, FALSE), size =
nrow(MovieRatingMatrix),replace = TRUE, prob = c(0.8,0.2))
which_train
MovieRatingMatrix_Train <- MovieRatingMatrix[which_train]
MovieRatingMatrix_Test <- MovieRatingMatrix[!which_train]
#To know how many models are there in Recommenderlab
recommender_models <- recommenderRegistry$get_entries(dataType =
"realRatingMatrix")
recommender_models
memory.limit(100000)
#Building a model
MovieRating_Recommender_Model <- Recommender(data=MovieRatingMatrix_Train,method="UBCF", param=list(normalize = "center"))
save(MovieRating_Recommender_Model,"../Data/Movie_Recommender_Model.data")
save(MovieRating_Recommender_Model,file="../Data/Movie_Recommender_Model.data")
n_recommended <- 5 # generate 5 recommendation per user
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix[1:2], n = n_recommended)  # Prediction for first user test data
#to see the list of movies recommended for the first user
recom_list <- as(MovieRecommendation_Predicted,
"list")
recom_list
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix, n = n_recommended)  # Prediction for first user test data
memory.limit(200000) # To store memory consuming variables in harddisk, given the limit [> RAM Size] as 100GB else we get memory issues
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix, n = n_recommended)  # Prediction for first user test data
### Recommendation Engine ##
library(recommenderlab)
library(data.table)
### Actual Data ##
MovieRating_Full <- setDT(read.csv("../Data/MoviesRatings_New.csv"))
MovieRating_Triplets <- MovieRating_Full[,.(userId,title_new,rating)][!is.na(userId)]
##MovieRating_Triplets
MovieRatingMatrix <- as(MovieRating_Triplets, "realRatingMatrix")
#spliting ratingmatrix into two with the proportion of 30% and 70%
which_train <- sample(x = c(TRUE, FALSE), size =
nrow(MovieRatingMatrix),replace = TRUE, prob = c(0.8,0.2))
MovieRatingMatrix_Train <- MovieRatingMatrix[which_train]
MovieRatingMatrix_Test <- MovieRatingMatrix[!which_train]
#To know how many models are there in Recommenderlab
recommender_models <- recommenderRegistry$get_entries(dataType =
"realRatingMatrix")
memory.limit(200000) # To store memory consuming variables in harddisk, given the limit [> RAM Size] as 100GB else we get memory issues
#Building a model
MovieRating_Recommender_Model <- Recommender(data=MovieRatingMatrix_Train,method="UBCF", param=list(normalize = "center"))
n_recommended <- 5 # generate 5 recommendation per user
MovieRatingMatrix
#predict recommendation for the first user
MovieRecommendation_Predicted <- predict(object = MovieRating_Recommender_Model,newdata =
MovieRatingMatrix, n = n_recommended)  # Prediction for first user test data
shiny::runApp('MovieRecommendationApp')
recommendationList <- list (c("Toy Story","Scarlet Street","Straw Dogs","Bourne Supremacy, The"))
recommendedMovieTable <- merge(
data.table("RecommendedMovies"=unlist(recommendationList))
recommendedMovieTable <- merge(
data.table("RecommendedMovies"=unlist(recommendationList)),
Movies
)[,c(1,5,6)]
Movies <- read.csv("../../Data/Movies_NEW.csv")
Movies <- read.csv("../Data/Movies_NEW.csv")
recommendedMovieTable <- merge(
data.table("RecommendedMovies"=unlist(recommendationList)),
Movies
)[,c(1,5,6)]
Movies <- read.csv("../../Data/Movies_NEW.csv")
data.table(RecommendedMovies = unlist(recommendationList)
)
Movies$RecommendedMovies <- Movies$title_new # Column with common name to Merge
recommendedMovieTable <- merge(
data.table("RecommendedMovies"=unlist(recommendationList)),
Movies
)[,c(1,5,6)]
Movies$RecommendedMovies
recommendedMovieTable
data.table(RecommendedMovies = unlist(recommendationList)
)
Movies$RecommendedMovies
withProgress(message="Predicting recommendation ...",value=10,
# recommendationList <- as(
#     predict(object = MovieRating_Recommender_Model,newdata =
#                          MovieRatingMatrix[which(userIDList == input$userId)], n = 5)
#     ,"list")
recommendationList <- list (c("Toy Story ","Scarlet Street ","Straw Dogs ","Bourne Supremacy, The "))
)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
MovieRating_Merged[!is.na(Ratings)]
MovieRating_Merged <-  setDT(read.csv("../../Data/MoviesRatings_NEW.csv"))
MovieRating_Merged <-  setDT(read.csv("../Data/MoviesRatings_NEW.csv"))
MovieRating_Merged[!is.na(Ratings)]
MovieRating_Merged[!is.na(ratings)]
MovieRating_Merged
MovieRating_Merged[!is.na(rating)]
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
Ratings <- read.csv("../../Data/ratings_group3.csv")
Ratings <- read.csv("../Data/ratings_group3.csv")
save(Ratings, "../Data/ratings.data")
save(Ratings, "../Data/ratings.data")
save(Ratings, file="../Data/ratings.data")
load("../Data/ratings.data")
Movies <- read.csv("../../Data/Movies_NEW.csv")
Movies <- read.csv("../Data/Movies_NEW.csv")
save(Movies, file="../Data/movies.data")
MovieRating_Merged <-  setDT(read.csv("../../Data/MoviesRatings_NEW.csv"))
MovieRating_Merged <-  setDT(read.csv("../Data/MoviesRatings_NEW.csv"))
save(MovieRating_Merged , file="../Data/MovieRating_Merged.data")
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
round("121312.23",0)
round(121312.23,0)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp()
runApp('MovieRecommendationApp')
which(userIDList == 1)
load("../../Data/ratings.data")
load("../../Data/movies.data")
load("../Data/movies.data")
load("../Data/ratings.data")
load("../Data/movies.data")
load("../Data/ratings.data")
which(userIDList == 1)
#storing only unique userid's
userIDList <- unique(Ratings$userId)
which(userIDList == 1)
MovieRatingMatrix[52885,1:2]
load("../../Data/MovieRatingMatrix.data")
load("../Data/MovieRatingMatrix.data")
MovieRatingMatrix[52885,1:2]
MovieRatingMatrix[100000,1:2]
MovieRatingMatrix[1000000,1:2]
as(MovieRatingMatrix[52885], "data.frame")
as(MovieRatingMatrix["1"], "data.frame")
as(MovieRatingMatrix["58355"], "data.frame")
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp()
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp()
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
eval_sets <- evaluationScheme(data=normalize(MovieRatingMatrix[1:10000]),
method = "cross-validation",
train=0.8,
given=items_to_keep,
goodRating=rating_threshold,
k=n_fold)
eval_sets
eval_sets <- evaluationScheme(data=normalize(MovieRatingMatrix[1:100]),
method = "split",
train=0.8,
given=items_to_keep,
goodRating=rating_threshold,
k=n_fold)
rating_threshold <- 3
eval_sets <- evaluationScheme(data=normalize(MovieRatingMatrix[1:100]),
method = "split",
train=0.8,
given=items_to_keep,
goodRating=rating_threshold,
k=n_fold)
eval_recommender <- Recommender(data = getData(eval_sets,
"train"),method = model_to_evaluate, parameter = model_parameters)
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
merge(
data.table("movieId"=1997)),
Movies
)
merge(data.table("movieId"=1997),
Movies)
runApp('MovieRecommendationApp')
setNames( merge(data.table("movieId"=1997), Movies)
setNames( merge(data.table("movieId"=1997), Movies) , "title_new",title)
setNames( merge(data.table("movieId"=1997), Movies) , "title_new","title")
setNames( merge(data.table("movieId"=1997), Movies) , "title","title_new")
setnames( merge(data.table("movieId"=1997), Movies) , "title","title_new")
testTable <- merge(data.table("movieId"=1997), Movies)
setnames( testTable , "title","title_new")
testTable
testTable <- merge(data.table("movieId"=1997), Movies)
setnames( testTable , "title_new","title")
testTable
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
testTable
testTable[title]
testTable["title"]
testTable$Title
testTable$title
testTable$title <- paste0("Hello",testTable$title)
testTable$title
runApp('MovieRecommendationApp')
runApp()
runApp('MovieRecommendationApp')
runApp('MovieRecommendationApp')
runApp()
shiny::runApp('MovieRecommendationApp')
### Recommendation Engine ##
library(recommenderlab)
library(data.table)
library(dplyr)
### Actual Data ##
MovieRating_Full <- setDT(read.csv("../Data/MoviesRatings_New.csv"))
## Creating Triplets to calculate Movie Rating Matrix
MovieRating_Triplets <- MovieRating_Full[,.(userId,movieId,rating)][!is.na(userId)]
Movies_MoreThanFiveRating <- MovieRating_Triplets %>% group_by(movieId) %>% summarize(n=n()) %>% filter(n>5)
MovieRating_Triplets <- merge(Movies_MoreThanFiveRating,MovieRating_Triplets)[,c("userId","movieId","rating")]
Users_MoreThanOneRating <- MovieRating_Triplets %>% group_by(userId) %>% summarize(n=n()) %>% filter(n>1)
MovieRating_Triplets <- merge(Users_MoreThanOneRating,MovieRating_Triplets)[,c("userId","movieId","rating")]
MovieRating_Triplets_GROUP <- MovieRating_Triplets %>%
group_by(userId) %>%
summarize(n=n()) %>% arrange(n)
